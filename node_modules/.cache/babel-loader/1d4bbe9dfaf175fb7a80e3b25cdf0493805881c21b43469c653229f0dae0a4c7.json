{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonha\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\inchoen\\\\icutd\\\\src\\\\components\\\\player\\\\Calender.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // React와 useState 훅을 가져옵니다.\nimport Calendar from 'react-calendar'; // react-calendar 컴포넌트를 가져옵니다.\nimport 'react-calendar/dist/Calendar.css'; // 기본 제공되는 CSS 파일을 가져옵니다.\nimport { format, isSameDay } from 'date-fns'; // date-fns의 format과 isSameDay 함수를 가져옵니다.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Calenderkk({\n  schedules\n}) {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date()); // 선택된 날짜를 상태로 관리합니다. 기본값은 오늘 날짜입니다.\n  // date-fns의 isSameDay를 사용해 선택된 날짜에 해당하는 스케줄을 필터링합니다.\n  const filteredSchedules = schedules.filter(schedule => isSameDay(new Date(schedule.date), selectedDate) // 두 날짜가 같은지 확인합니다.\n  );\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Calendar, {\n        onChange: setSelectedDate // 달력에서 날짜가 선택되면 선택된 날짜를 업데이트합니다.\n        ,\n        value: selectedDate // 선택된 날짜를 달력에 표시합니다.\n        ,\n        tileContent: ({\n          date,\n          view\n        }) => view === 'month' &&\n        /*#__PURE__*/\n        // 월별 보기일 때 각 날짜에 스케줄 유무를 표시합니다.\n        _jsxDEV(\"div\", {\n          children: schedules.some(schedule => isSameDay(new Date(schedule.date), date)) && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u25CF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }, this) // 해당 날짜에 스케줄이 있으면 점을 표시\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uC2A4\\uCF00\\uC904 \\uBAA9\\uB85D - \", format(selectedDate, 'yyyy년 MM월 dd일')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: filteredSchedules.map(schedule => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: schedule.title\n        }, schedule.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this) // 스케줄 제목을 출력\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Calenderkk, \"mu4fg2bVP7ctA7Sx6pVThSFlyto=\");\n_c = Calenderkk;\nconst schedules = [\n// 예시 스케줄 데이터\n{\n  id: 1,\n  date: '2024-09-25',\n  title: '프로젝트 회의'\n}, {\n  id: 2,\n  date: '2024-09-25',\n  title: '팀 점심 식사'\n}, {\n  id: 3,\n  date: '2024-09-27',\n  title: '데이터 분석 워크숍'\n}, {\n  id: 4,\n  date: '2024-09-28',\n  title: '친구와의 저녁 약속'\n}, {\n  id: 5,\n  date: '2024-09-29',\n  title: '운동하기'\n}, {\n  id: 6,\n  date: '2024-10-01',\n  title: '프로젝트 마감일'\n}, {\n  id: 7,\n  date: '2024-10-05',\n  title: '가족 모임'\n}, {\n  id: 8,\n  date: '2024-10-10',\n  title: '의사 예약'\n}];\nvar _c;\n$RefreshReg$(_c, \"Calenderkk\");","map":{"version":3,"names":["React","useState","Calendar","format","isSameDay","jsxDEV","_jsxDEV","Fragment","_Fragment","Calenderkk","schedules","_s","selectedDate","setSelectedDate","Date","filteredSchedules","filter","schedule","date","children","onChange","value","tileContent","view","some","fileName","_jsxFileName","lineNumber","columnNumber","map","title","id","_c","$RefreshReg$"],"sources":["C:/Users/sonha/OneDrive/바탕 화면/inchoen/icutd/src/components/player/Calender.jsx"],"sourcesContent":["import React, { useState } from 'react';  // React와 useState 훅을 가져옵니다.\r\nimport Calendar from 'react-calendar';  // react-calendar 컴포넌트를 가져옵니다.\r\nimport 'react-calendar/dist/Calendar.css';  // 기본 제공되는 CSS 파일을 가져옵니다.\r\nimport { format, isSameDay } from 'date-fns';  // date-fns의 format과 isSameDay 함수를 가져옵니다.\r\n\r\n\r\nexport default function Calenderkk({schedules}){\r\n\r\n    const [selectedDate, setSelectedDate] = useState(new Date());  // 선택된 날짜를 상태로 관리합니다. 기본값은 오늘 날짜입니다.\r\n    // date-fns의 isSameDay를 사용해 선택된 날짜에 해당하는 스케줄을 필터링합니다.\r\n    const filteredSchedules = schedules.filter(schedule =>\r\n      isSameDay(new Date(schedule.date), selectedDate)  // 두 날짜가 같은지 확인합니다.\r\n    );\r\n    return (\r\n        <>\r\n            <div>\r\n            <Calendar\r\n              onChange={setSelectedDate}  // 달력에서 날짜가 선택되면 선택된 날짜를 업데이트합니다.\r\n              value={selectedDate}  // 선택된 날짜를 달력에 표시합니다.\r\n              tileContent={({ date, view }) => view === 'month' && (  // 월별 보기일 때 각 날짜에 스케줄 유무를 표시합니다.\r\n                <div>\r\n                  {/* 스케줄이 있는 날짜에 점을 표시합니다. */}\r\n                  {schedules.some(schedule => isSameDay(new Date(schedule.date), date)) && (\r\n                    <span>●</span>  // 해당 날짜에 스케줄이 있으면 점을 표시\r\n                  )}\r\n                </div>\r\n              )}\r\n            />\r\n            <h3>스케줄 목록 - {format(selectedDate, 'yyyy년 MM월 dd일')}</h3>  {/* date-fns의 format을 사용해 날짜를 지정된 형식으로 출력합니다. */}\r\n            <ul>\r\n              {/* 필터링된 스케줄을 리스트로 출력합니다. */}\r\n              {filteredSchedules.map(schedule => (\r\n                <li key={schedule.id}>{schedule.title}</li>  // 스케줄 제목을 출력\r\n              ))}\r\n            </ul>\r\n           </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst schedules = [  // 예시 스케줄 데이터\r\n    {\r\n      id: 1,\r\n      date: '2024-09-25',\r\n      title: '프로젝트 회의',\r\n    },\r\n    {\r\n      id: 2,\r\n      date: '2024-09-25',\r\n      title: '팀 점심 식사',\r\n    },\r\n    {\r\n      id: 3,\r\n      date: '2024-09-27',\r\n      title: '데이터 분석 워크숍',\r\n    },\r\n    {\r\n      id: 4,\r\n      date: '2024-09-28',\r\n      title: '친구와의 저녁 약속',\r\n    },\r\n    {\r\n      id: 5,\r\n      date: '2024-09-29',\r\n      title: '운동하기',\r\n    },\r\n    {\r\n      id: 6,\r\n      date: '2024-10-01',\r\n      title: '프로젝트 마감일',\r\n    },\r\n    {\r\n      id: 7,\r\n      date: '2024-10-05',\r\n      title: '가족 모임',\r\n    },\r\n    {\r\n      id: 8,\r\n      date: '2024-10-10',\r\n      title: '의사 예약',\r\n    },\r\n  ];"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}