{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonha\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\inchoen\\\\icutd\\\\src\\\\components\\\\player\\\\Calender.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // React와 useState 훅을 가져옵니다.\nimport Calendar from 'react-calendar'; // react-calendar 컴포넌트를 가져옵니다.\nimport 'react-calendar/dist/Calendar.css'; // 기본 제공되는 CSS 파일을 가져옵니다.\nimport { format, isSameDay } from 'date-fns'; // date-fns의 format과 isSameDay 함수를 가져옵니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Calendarkk() {\n  _s();\n  // 컴포넌트 정의. schedules는 props로 전달되는 스케줄 배열입니다.\n  const schedules = [\n  // 예시 스케줄 데이터\n  {\n    id: 1,\n    date: '2024-09-25',\n    title: '프로젝트 회의'\n  }, {\n    id: 2,\n    date: '2024-09-25',\n    title: '팀 점심 식사'\n  }, {\n    id: 3,\n    date: '2024-09-27',\n    title: '데이터 분석 워크숍'\n  }, {\n    id: 4,\n    date: '2024-09-28',\n    title: '친구와의 저녁 약속'\n  }, {\n    id: 5,\n    date: '2024-09-29',\n    title: '운동하기'\n  }, {\n    id: 6,\n    date: '2024-10-01',\n    title: '프로젝트 마감일'\n  }, {\n    id: 7,\n    date: '2024-10-05',\n    title: '가족 모임'\n  }, {\n    id: 8,\n    date: '2024-10-10',\n    title: '의사 예약'\n  }];\n  const [selectedDate, setSelectedDate] = useState(new Date()); // 선택된 날짜를 상태로 관리합니다. 기본값은 오늘 날짜입니다.\n\n  // 특정 날짜에 해당하는 스케줄 목록을 반환하는 함수\n  const getSchedulesForDate = date => {\n    return schedules.filter(schedule => isSameDay(new Date(schedule.date), date));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      locale: \"en-us\",\n      onChange: setSelectedDate // 달력에서 날짜가 선택되면 선택된 날짜를 업데이트합니다.\n      ,\n      value: selectedDate // 선택된 날짜를 달력에 표시합니다.\n      ,\n      tileContent: ({\n        date,\n        view\n      }) => view === 'month' &&\n      /*#__PURE__*/\n      // 월별 보기일 때 각 날짜에 스케줄 유무를 표시합니다.\n      _jsxDEV(\"div\", {\n        className: \"schedule-content\",\n        children: getSchedulesForDate(date).length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"schedule-list\",\n          children: getSchedulesForDate(date).map(schedule => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"schedule-item\",\n            children: schedule.title\n          }, schedule.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"no-schedule\",\n          children: \"\\uC2A4\\uCF00\\uC904\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this) // 스케줄이 없을 경우 텍스트 출력\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this),\n      className: \"custom-calendar\" // 커스텀 스타일을 적용하기 위한 클래스 이름을 추가합니다.\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"\\uC2A4\\uCF00\\uC904 \\uBAA9\\uB85D - \", format(selectedDate, 'yyyy년 MM월 dd일')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: getSchedulesForDate(selectedDate).length > 0 ? getSchedulesForDate(selectedDate).map(schedule => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: schedule.title\n      }, schedule.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this) // 스케줄 제목을 출력\n      ) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"\\uC77C\\uC815\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this) // 스케줄이 없을 때 출력할 텍스트\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Calendarkk, \"mu4fg2bVP7ctA7Sx6pVThSFlyto=\");\n_c = Calendarkk;\n;\nvar _c;\n$RefreshReg$(_c, \"Calendarkk\");","map":{"version":3,"names":["React","useState","Calendar","format","isSameDay","jsxDEV","_jsxDEV","Calendarkk","_s","schedules","id","date","title","selectedDate","setSelectedDate","Date","getSchedulesForDate","filter","schedule","children","locale","onChange","value","tileContent","view","className","length","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sonha/OneDrive/바탕 화면/inchoen/icutd/src/components/player/Calender.jsx"],"sourcesContent":["import React, { useState } from 'react';  // React와 useState 훅을 가져옵니다.\r\nimport Calendar from 'react-calendar';  // react-calendar 컴포넌트를 가져옵니다.\r\nimport 'react-calendar/dist/Calendar.css';  // 기본 제공되는 CSS 파일을 가져옵니다.\r\nimport { format, isSameDay } from 'date-fns';  // date-fns의 format과 isSameDay 함수를 가져옵니다.\r\n\r\n\r\nexport default function Calendarkk ()  {  // 컴포넌트 정의. schedules는 props로 전달되는 스케줄 배열입니다.\r\n    const schedules = [  // 예시 스케줄 데이터\r\n        {\r\n          id: 1,\r\n          date: '2024-09-25',\r\n          title: '프로젝트 회의',\r\n        },\r\n        {\r\n          id: 2,\r\n          date: '2024-09-25',\r\n          title: '팀 점심 식사',\r\n        },\r\n        {\r\n          id: 3,\r\n          date: '2024-09-27',\r\n          title: '데이터 분석 워크숍',\r\n        },\r\n        {\r\n          id: 4,\r\n          date: '2024-09-28',\r\n          title: '친구와의 저녁 약속',\r\n        },\r\n        {\r\n          id: 5,\r\n          date: '2024-09-29',\r\n          title: '운동하기',\r\n        },\r\n        {\r\n          id: 6,\r\n          date: '2024-10-01',\r\n          title: '프로젝트 마감일',\r\n        },\r\n        {\r\n          id: 7,\r\n          date: '2024-10-05',\r\n          title: '가족 모임',\r\n        },\r\n        {\r\n          id: 8,\r\n          date: '2024-10-10',\r\n          title: '의사 예약',\r\n        },\r\n      ];\r\n\r\n  const [selectedDate, setSelectedDate] = useState(new Date());  // 선택된 날짜를 상태로 관리합니다. 기본값은 오늘 날짜입니다.\r\n\r\n  // 특정 날짜에 해당하는 스케줄 목록을 반환하는 함수\r\n  const getSchedulesForDate = (date) => {\r\n    return schedules.filter(schedule => isSameDay(new Date(schedule.date), date));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Calendar\r\n        locale=\"en-us\"\r\n        onChange={setSelectedDate}  // 달력에서 날짜가 선택되면 선택된 날짜를 업데이트합니다.\r\n        value={selectedDate}  // 선택된 날짜를 달력에 표시합니다.\r\n        tileContent={({ date, view }) => view === 'month' && (  // 월별 보기일 때 각 날짜에 스케줄 유무를 표시합니다.\r\n          <div className=\"schedule-content\">\r\n            {/* 해당 날짜의 스케줄을 가져옵니다. */}\r\n            {getSchedulesForDate(date).length > 0 ? (\r\n              <ul className=\"schedule-list\">\r\n                {/* 스케줄이 있을 경우 내용을 리스트 형식으로 출력 */}\r\n                {getSchedulesForDate(date).map(schedule => (\r\n                  <li key={schedule.id} className=\"schedule-item\">\r\n                    {schedule.title}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <span className=\"no-schedule\">스케줄이 없습니다.</span>  // 스케줄이 없을 경우 텍스트 출력\r\n            )}\r\n          </div>\r\n        )}\r\n        className=\"custom-calendar\"  // 커스텀 스타일을 적용하기 위한 클래스 이름을 추가합니다.\r\n      />\r\n      <h3>스케줄 목록 - {format(selectedDate, 'yyyy년 MM월 dd일')}</h3>  {/* date-fns의 format을 사용해 날짜를 지정된 형식으로 출력합니다. */}\r\n      <ul>\r\n        {/* 선택된 날짜의 스케줄을 리스트로 출력합니다. 스케줄이 없으면 \"일정이 없습니다.\"를 표시합니다. */}\r\n        {getSchedulesForDate(selectedDate).length > 0 ? (\r\n          getSchedulesForDate(selectedDate).map(schedule => (\r\n            <li key={schedule.id}>{schedule.title}</li>  // 스케줄 제목을 출력\r\n          ))\r\n        ) : (\r\n          <li>일정이 없습니다.</li>  // 스케줄이 없을 때 출력할 텍스트\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}