{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonha\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\inchoen\\\\icutd\\\\src\\\\page\\\\Player\\\\schedule.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Banner from \"../../components/player/Banner\";\n// import Calenderkk from \"../../components/player/Calender\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Schedule() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Banner, {\n      onBannerTab: '선수단 일정',\n      aniWidth: '100%'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"size1442\",\n      children: /*#__PURE__*/_jsxDEV(FeedbackForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n// 공식 문서 스터디 중....\n\n//state 값이 어떤 흐름으로 바뀌나 궁금해서 console.log를 중간중간 섞어서 state의 변화를 관찰했다.\n//\n//총 세개의 console.log가 있는데 구분하기 편하게 앞에 index를 붙여주었다.\n//\n//1.실행하면 컴포넌트 렌더링 단계에서  3번 console 실행  ⇒  결과 :  typing\n//\n//2.submit 버튼의 click  이벤트 실행 ⇒ 1번 console실행 ⇒ 결과 : typing ,\n//\n//그다음줄이 비동기 함수 이기 때문에 잠시 함수 바깥으로 이동 ⇒\n//\n//3번 console 실행 ⇒ 결과 : sending\n//\n//하고 state 값이 바뀌었기 때문에 컴포넌트 재렌더링 ⇒\n//\n//state 다시 typing 으로 초기화\n//\n//3.비동기 함수의 promise 값을 리턴받았기 때문에 다시 handleSubmit 으로 돌아감\n//\n//⇒ 2번 console 실행 ⇒ 결과 : typing\n//\n//1. 3번 console실행  ⇒ 결과 : sent ⇒ 컴포넌트 재렌더링?\n//\n//react 는  state 값이 바뀌면 화면을 다시 재렌더링 한다.\n//\n//그렇기 때문에 중간에 비동기 함수를 만났을 때에도 콜백함수를 스택에 쌓아두고\n//\n//다시 나와서 state 가 바뀌었기 때문에 재렌더링을 진행 한다고 파악이 됐다.\n//\n//그리고 state는 컴포넌트의 내용을 다읽고 화면을 그리기 직전에 변경 되는거 같다.\n_c = Schedule;\nexport function FeedbackForm() {\n  _s();\n  const [text, setText] = useState('');\n  const [status, setStatus] = useState('typing');\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setStatus('sending');\n    console.log(status);\n    //   가장헷갈리는 부분 비동기 함수의 promise 값을 받고 console을 실행했을때 왜 sending 이 아니라 typing 이 나오는가\n    await sendMessage(text);\n    setStatus('sent');\n    console.log(status);\n  }\n  console.log(status);\n  const isSending = status === 'sending';\n  const isSent = status === 'sent';\n  if (isSent) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Thanks for feedback!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"How was your stay at The Prancing Pony?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      disabled: isSending,\n      value: text,\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isSending,\n      type: \"submit\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), isSending && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Sending...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n}\n\n// Pretend to send a message.\n_s(FeedbackForm, \"49YgMjDzT5kp5ZxWOd7XK2EFVPs=\");\n_c2 = FeedbackForm;\nfunction sendMessage(text) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  });\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"Schedule\");\n$RefreshReg$(_c2, \"FeedbackForm\");","map":{"version":3,"names":["useState","Banner","jsxDEV","_jsxDEV","Fragment","_Fragment","Schedule","children","onBannerTab","aniWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","FeedbackForm","_c","_s","text","setText","status","setStatus","handleSubmit","e","preventDefault","console","log","sendMessage","isSending","isSent","onSubmit","disabled","value","onChange","target","type","_c2","Promise","resolve","setTimeout","$RefreshReg$"],"sources":["C:/Users/sonha/OneDrive/바탕 화면/inchoen/icutd/src/page/Player/schedule.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport Banner from \"../../components/player/Banner\";\r\n// import Calenderkk from \"../../components/player/Calender\";\r\n\r\nexport default function Schedule(){\r\n\r\n\r\n    return (\r\n        <>\r\n            <Banner onBannerTab={'선수단 일정'} aniWidth={'100%'}/>\r\n            <section className=\"size1442\">\r\n                {/* <Calenderkk /> */}\r\n            <FeedbackForm />\r\n\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n// 공식 문서 스터디 중....\r\n\r\n//state 값이 어떤 흐름으로 바뀌나 궁금해서 console.log를 중간중간 섞어서 state의 변화를 관찰했다.\r\n//\r\n//총 세개의 console.log가 있는데 구분하기 편하게 앞에 index를 붙여주었다.\r\n//\r\n//1.실행하면 컴포넌트 렌더링 단계에서  3번 console 실행  ⇒  결과 :  typing\r\n//\r\n//2.submit 버튼의 click  이벤트 실행 ⇒ 1번 console실행 ⇒ 결과 : typing ,\r\n//\r\n//그다음줄이 비동기 함수 이기 때문에 잠시 함수 바깥으로 이동 ⇒\r\n//\r\n//3번 console 실행 ⇒ 결과 : sending\r\n//\r\n//하고 state 값이 바뀌었기 때문에 컴포넌트 재렌더링 ⇒\r\n//\r\n//state 다시 typing 으로 초기화\r\n//\r\n//3.비동기 함수의 promise 값을 리턴받았기 때문에 다시 handleSubmit 으로 돌아감\r\n//\r\n//⇒ 2번 console 실행 ⇒ 결과 : typing\r\n//\r\n//1. 3번 console실행  ⇒ 결과 : sent ⇒ 컴포넌트 재렌더링?\r\n//\r\n//react 는  state 값이 바뀌면 화면을 다시 재렌더링 한다.\r\n//\r\n//그렇기 때문에 중간에 비동기 함수를 만났을 때에도 콜백함수를 스택에 쌓아두고\r\n//\r\n//다시 나와서 state 가 바뀌었기 때문에 재렌더링을 진행 한다고 파악이 됐다.\r\n//\r\n//그리고 state는 컴포넌트의 내용을 다읽고 화면을 그리기 직전에 변경 되는거 같다.\r\n\r\nexport  function FeedbackForm() {\r\n    const [text, setText] = useState('');\r\n    const [status, setStatus] = useState('typing');\r\n  \r\n    async function handleSubmit(e) {\r\n      e.preventDefault();\r\n      setStatus('sending');\r\n      console.log(status);\r\n    //   가장헷갈리는 부분 비동기 함수의 promise 값을 받고 console을 실행했을때 왜 sending 이 아니라 typing 이 나오는가\r\n      await sendMessage(text);\r\n      setStatus('sent');\r\n      console.log(status)\r\n    }\r\n    console.log(status)\r\n    \r\n    \r\n    const isSending = status === 'sending';\r\n    const isSent = status === 'sent';\r\n    \r\n    if (isSent) {\r\n        return <h1>Thanks for feedback!</h1>\r\n    }\r\n    \r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <p>How was your stay at The Prancing Pony?</p>\r\n        <textarea\r\n          disabled={isSending}\r\n          value={text}\r\n          onChange={e => setText(e.target.value)}\r\n        />\r\n        <br />\r\n        <button\r\n          disabled={isSending}\r\n          type=\"submit\"\r\n        >\r\n          Send\r\n        </button>\r\n        {isSending && <p>Sending...</p>}\r\n      </form>\r\n    );\r\n  }\r\n  \r\n  // Pretend to send a message.\r\n  function sendMessage(text) {\r\n    return new Promise(resolve => {\r\n      setTimeout(resolve, 2000);\r\n    });\r\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}